// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package maximumpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaximumServiceClient is the client API for MaximumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaximumServiceClient interface {
	Maximum(ctx context.Context, opts ...grpc.CallOption) (MaximumService_MaximumClient, error)
}

type maximumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaximumServiceClient(cc grpc.ClientConnInterface) MaximumServiceClient {
	return &maximumServiceClient{cc}
}

func (c *maximumServiceClient) Maximum(ctx context.Context, opts ...grpc.CallOption) (MaximumService_MaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaximumService_ServiceDesc.Streams[0], "/maximum.MaximumService/Maximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &maximumServiceMaximumClient{stream}
	return x, nil
}

type MaximumService_MaximumClient interface {
	Send(*MaximumRequest) error
	Recv() (*MaximumResponse, error)
	grpc.ClientStream
}

type maximumServiceMaximumClient struct {
	grpc.ClientStream
}

func (x *maximumServiceMaximumClient) Send(m *MaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maximumServiceMaximumClient) Recv() (*MaximumResponse, error) {
	m := new(MaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaximumServiceServer is the server API for MaximumService service.
// All implementations must embed UnimplementedMaximumServiceServer
// for forward compatibility
type MaximumServiceServer interface {
	Maximum(MaximumService_MaximumServer) error
	mustEmbedUnimplementedMaximumServiceServer()
}

// UnimplementedMaximumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaximumServiceServer struct {
}

func (UnimplementedMaximumServiceServer) Maximum(MaximumService_MaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method Maximum not implemented")
}
func (UnimplementedMaximumServiceServer) mustEmbedUnimplementedMaximumServiceServer() {}

// UnsafeMaximumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaximumServiceServer will
// result in compilation errors.
type UnsafeMaximumServiceServer interface {
	mustEmbedUnimplementedMaximumServiceServer()
}

func RegisterMaximumServiceServer(s grpc.ServiceRegistrar, srv MaximumServiceServer) {
	s.RegisterService(&MaximumService_ServiceDesc, srv)
}

func _MaximumService_Maximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaximumServiceServer).Maximum(&maximumServiceMaximumServer{stream})
}

type MaximumService_MaximumServer interface {
	Send(*MaximumResponse) error
	Recv() (*MaximumRequest, error)
	grpc.ServerStream
}

type maximumServiceMaximumServer struct {
	grpc.ServerStream
}

func (x *maximumServiceMaximumServer) Send(m *MaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maximumServiceMaximumServer) Recv() (*MaximumRequest, error) {
	m := new(MaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaximumService_ServiceDesc is the grpc.ServiceDesc for MaximumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaximumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maximum.MaximumService",
	HandlerType: (*MaximumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Maximum",
			Handler:       _MaximumService_Maximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectional-stream-api/maximumpb/maximum.proto",
}
